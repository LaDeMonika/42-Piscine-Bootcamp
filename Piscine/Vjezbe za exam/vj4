/*
1.
//Create a function that displays the alphabet in lowercase, on a single line, by
descending order, starting from the letter ’z’.
-
#include <unistd.h>

void	imefajlazabsam()
{
	int	h;
	
	h = 'a';
	while(h >= 'z')
	{
		write(1, &h, 1);
		h++;
	}
}
*************************************************************************************************
2.
//Create a function that takes a pointer to int as a parameter, and sets the value "42"
to that int.
-
#include <unistd.h>

void imefajla(int	*pointer)
{
	*pointer = 42;
}
*************************************************************************************************
3.
//Write a function that displays the character passed as a parameter.
-
#include <unistd.h>

void	imefajla(char c)
{
	write(1, &c, 1);
}
*************************************************************************************************
4.
//Create a function that takes a pointer to pointer to pointer to pointer to pointer
to pointer to pointer to pointer to pointer to int as a parameter and sets the value
"42" to that int.
-
#include <unistd.h>

void imefajla(int *********pointer)
{
	*********pointer = 42
}
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
---> ovo znaci da smo dodijelili vrijednost varijabli putem pointera, evo duzi
prijmjer kako to stvarno izgleda:
int value = 42;
int *pointerToValue = &value; // Dodjeljivanje adrese varijable value pointeru pointerToValue

*pointerToValue = 42; // Dodjeljivanje vrijednosti 42 putem pointera

printf("Vrijednost: %d\n", value); // Ispisuje vrijednost varijable value (42)
*************************************************************************************************
5.
//Create a function that displays the alphabet in lowercase, on a single line, by
ascending order, starting from the letter ’a’.
-
#includ <unistd.h>

int main()
{
	char	l;
	
	l = 'a';
	while(l >= 'z')
	{
		write(1, &l, 1);
		l++;
	}
}
*************************************************************************************************
6.
//Create a function ft_div_mod prototyped like this :
void ft_div_mod(int a, int b, int *div, int *mod);
//This function divides parameters a by b and stores the result in the int pointed by
div. It also stores the remainder of the division of a by b in the int pointed by mod.
-
#include <unistd.h>

void ft_div_mod(int a, int b, int *div, int *mod)
{
		int	temp;
		
		temp = a;
		*div = temp / b;
		*mod = temp % b;
}
*************************************************************************************************
7.
//Create a function that displays all digits, on a single line, by ascending order.
-
#include <unistd>

int main
*************************************************************************************************
8.
//Create a function ft_ultimate_div_mod with the following prototype :
void ft_ultimate_div_mod(int *a, int *b);
This function divides parameters a by b. The result of this division is stored in the
int pointed by a. The remainder of the division is stored in the int pointed by b.
-
void ft_ultimate_div_mod(int *a, int *b)
{
	int temp;
	
	temp = *a;
	*a = temp / *b;
	*b = temp % *b;
}
*************************************************************************************************
9.
//Create a function that displays ’N’ or ’P’ depending on the integer’s sign entered
as a parameter. If n is negative, display ’N’. If n is positive or null, display ’P’.
Here’s how it should be prototyped :
void ft_is_negative(int n);
-
#include <unistd.h>

Void ft_is_negative(int n)
{
	char	p;
	char	m;
	
	m = 'N';
	p = 'P';

	if(n <= 0)
	{
		write(1, &m, 1);
	}
	else
	{
		write(1, &p,1);
	}
}
//mogu i ovako
write (1, "N", 1);
// evo cijela funkcija.
#include <unistd.h>

void ft_is_negative(int n)
{
	char	p;
	char	m;
	
	m = 'N';
	p = 'P';

	if(n <= 0)
	{
		write(1, &m, 1);
	}
	else
	{
		write(1, &p,1);
	}
}
int main()
{
    int b;
    b = -113;
    ft_is_negative(b);
    
    return 0;
}





















